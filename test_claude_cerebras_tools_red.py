#!/usr/bin/env python3
"""
RED TEST: Demonstrates that claude-cerebras cannot execute tools (like file creation)

This test shows the current broken behavior where claude-cerebras just generates
code as text but doesn't actually execute it through tools.
"""

import subprocess
import os
import time
import json
import tempfile
from pathlib import Path

def test_claude_cerebras_tool_limitation():
    """
    RED TEST: Shows claude-cerebras cannot create files
    
    Expected behavior (what SHOULD happen):
    - Claude CLI should be able to create files using Write tool
    - File should actually exist on filesystem after request
    
    Current broken behavior (what DOES happen):
    - Claude CLI just returns code as text
    - No actual file is created
    - Tools are not executed
    """
    
    print("üî¥ RED TEST: Testing claude-cerebras tool execution limitation")
    print("=" * 60)
    
    # Create a unique test file name
    test_file = f"cerebras_test_file_{int(time.time())}.txt"
    test_content = f"Test content created by Cerebras at {time.time()}"
    
    print(f"Test file: {test_file}")
    print(f"Test content: {test_content}")
    print()
    
    # Ensure file doesn't exist before test
    if os.path.exists(test_file):
        os.remove(test_file)
    
    print("üìù Testing file creation through claude-cerebras...")
    
    # Create the command that should create a file
    claude_prompt = f'Create a file named "{test_file}" with the content "{test_content}"'
    
    print(f"Prompt: {claude_prompt}")
    print()
    
    # Analyze claude-cerebras architecture
    print("üîç Checking current claude-cerebras architecture...")
    
    # Check if claude-cerebras exists
    claude_cerebras_path = "./claude-cerebras"
    if not os.path.exists(claude_cerebras_path):
        print(f"‚ùå {claude_cerebras_path} not found")
        return False
    
    # Check what proxy claude-cerebras uses
    with open("claude-cerebras", "r") as f:
        claude_cerebras_content = f.read()
    
    print("üîç Analysis of claude-cerebras script:")
    
    if "cerebras_proxy_simple.py" in claude_cerebras_content:
        print("‚úÖ claude-cerebras uses cerebras_proxy_simple.py")
        print("‚ùå cerebras_proxy_simple.py has NO TOOL EXECUTION capabilities")
    else:
        print("‚ùì Unclear which proxy is used by claude-cerebras")
    
    if "cerebras_proxy.py" in claude_cerebras_content:
        print("‚úÖ claude-cerebras references cerebras_proxy.py")
    else:
        print("‚ùå claude-cerebras does NOT use a tool-enabled proxy")
        print("‚ùå This means NO TOOL EXECUTION with Cerebras backend")
    
    print()
    print("üîç Checking cerebras_proxy_simple.py capabilities...")
    
    # Check if cerebras_proxy_simple has tool support
    if os.path.exists("cerebras_proxy_simple.py"):
        with open("cerebras_proxy_simple.py", "r") as f:
            cerebras_proxy_content = f.read()
        
        has_tools = (
            "str_replace_editor" in cerebras_proxy_content or
            "bash" in cerebras_proxy_content or
            "ClaudeCodeTools" in cerebras_proxy_content or
            "tool" in cerebras_proxy_content.lower()
        )
        
        if has_tools:
            print("‚úÖ cerebras_proxy_simple.py has tool support")
        else:
            print("‚ùå cerebras_proxy_simple.py has NO TOOL SUPPORT")
            print("‚ùå It only converts Anthropic API ‚Üî OpenAI API formats")
            print("‚ùå No bash execution, no file creation, no tool calls")
    
    print()
    print("üîç Expected vs Actual Behavior:")
    print()
    print("EXPECTED (with tools):")
    print("  User: 'Create file test.txt'")
    print("  Claude: 'I'll create the file' + ACTUALLY CREATES FILE")
    print("  Result: ‚úÖ File exists on filesystem")
    print()
    print("ACTUAL (current claude-cerebras):")
    print("  User: 'Create file test.txt'") 
    print("  Claude: 'Here's Python code to create file' (TEXT ONLY)")
    print("  Result: ‚ùå No file created, just code as text")
    print()
    
    print("üî¥ RED TEST RESULT: FAILING AS EXPECTED")
    print("=" * 60)
    print("‚ùå claude-cerebras cannot execute tools because:")
    print("   1. It uses cerebras_proxy_simple.py")
    print("   2. cerebras_proxy_simple.py has no tool execution")
    print("   3. It only does API format conversion (Anthropic ‚Üî OpenAI)")
    print("   4. File creation requests return code text, not actual files")
    print()
    print("‚úÖ This confirms the bug - claude-cerebras needs tool-enabled proxy")
    
    return True

def test_cerebras_proxy_comparison():
    """Compare the Cerebras proxy with tool-enabled alternatives"""
    print("\nüîç CEREBRAS PROXY COMPARISON:")
    print("=" * 40)
    
    # Check cerebras_proxy_simple.py
    if os.path.exists("cerebras_proxy_simple.py"):
        with open("cerebras_proxy_simple.py", "r") as f:
            simple_content = f.read()
        
        print("üìÑ cerebras_proxy_simple.py:")
        print(f"   Lines: {len(simple_content.splitlines())}")
        print(f"   Has ClaudeCodeTools: {'ClaudeCodeTools' in simple_content}")
        print(f"   Has bash tool: {'bash(' in simple_content}")
        print(f"   Has file tools: {'str_replace_editor' in simple_content}")
        print(f"   Purpose: API format conversion only")
    
    # Check if there's a regular cerebras_proxy.py
    if os.path.exists("cerebras_proxy.py"):
        with open("cerebras_proxy.py", "r") as f:
            proxy_content = f.read()
        
        print("üìÑ cerebras_proxy.py:")
        print(f"   Lines: {len(proxy_content.splitlines())}")
        print(f"   Has ClaudeCodeTools: {'ClaudeCodeTools' in proxy_content}")
        print(f"   Has bash tool: {'bash(' in proxy_content}")
        print(f"   Has file tools: {'str_replace_editor' in proxy_content}")
    
    # Compare with our tool-enabled proxy
    if os.path.exists("vast_tools_proxy.py"):
        with open("vast_tools_proxy.py", "r") as f:
            tools_content = f.read()
        
        print("üìÑ vast_tools_proxy.py (for comparison):")
        print(f"   Lines: {len(tools_content.splitlines())}")
        print(f"   Has ClaudeCodeTools: {'ClaudeCodeTools' in tools_content}")
        print(f"   Has bash tool: {'bash(' in tools_content}")
        print(f"   Has file tools: {'str_replace_editor' in tools_content}")
        print(f"   Purpose: Full tool execution + API conversion")

def test_claude_cerebras_architecture():
    """Analyze claude-cerebras architecture"""
    print("\nüîç CLAUDE-CEREBRAS ARCHITECTURE ANALYSIS:")
    print("=" * 50)
    
    print("Current flow:")
    print("  Claude CLI ‚Üí HTTP ‚Üí cerebras_proxy_simple.py ‚Üí Cerebras Cloud API")
    print("                       ‚Üë")
    print("                  NO TOOLS")
    print("                  Only format conversion")
    print()
    
    print("Issues:")
    print("  ‚ùå No bash command execution") 
    print("  ‚ùå No file creation/editing")
    print("  ‚ùå No tool calls of any kind")
    print("  ‚ùå Limited Claude Code CLI compatibility")
    print()
    
    print("Required fix:")
    print("  ‚úÖ Create cerebras_tools_proxy.py (like vast_tools_proxy.py)")
    print("  ‚úÖ Add tool execution capabilities")
    print("  ‚úÖ Maintain Cerebras API integration") 
    print("  ‚úÖ Keep format conversion functionality")

if __name__ == "__main__":
    print("üß™ RED TEST SUITE: Claude-Cerebras Tool Execution Limitations")
    print("=" * 70)
    print()
    
    # Run the main test
    result = test_claude_cerebras_tool_limitation()
    
    # Run comparisons
    test_cerebras_proxy_comparison()
    test_claude_cerebras_architecture()
    
    print("\n" + "=" * 70)
    print("üî¥ RED TEST COMPLETE")
    print("‚úÖ Successfully demonstrated the limitation")
    print("üí° Next: Fix claude-cerebras to use tool-enabled proxy")
    print()
    print("üîß SOLUTION NEEDED:")
    print("  1. Create cerebras_tools_proxy.py (based on vast_tools_proxy.py)")
    print("  2. Modify claude-cerebras to use cerebras_tools_proxy.py")
    print("  3. Add tool execution while maintaining Cerebras Cloud integration")
    print("  4. Test with green test to verify fix works")