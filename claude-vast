#!/bin/bash
# Claude CLI with Vast.ai Integration
# Usage: ./claude-vast [claude options]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Load configuration from file
CONFIG_FILE="$HOME/.claude-proxy-config"

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    # Default configuration
    VAST_SSH_HOST="${VAST_SSH_HOST:-ssh7.vast.ai}"
    VAST_SSH_PORT="${VAST_SSH_PORT:-12806}"
    VAST_USER="${VAST_USER:-root}"
    LOCAL_PORT="${LOCAL_PORT:-8000}"
    VAST_PORT="${VAST_PORT:-8000}"
fi

echo -e "${BLUE}🚀 Claude CLI - Vast.ai Mode${NC}"
echo "=============================="

# Check if SSH tunnel is active
check_tunnel() {
    if curl -s http://localhost:${LOCAL_PORT}/health >/dev/null 2>&1; then
        echo -e "${GREEN}✅ SSH tunnel active${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠️  SSH tunnel not active${NC}"
        return 1
    fi
}

# Start SSH tunnel
start_tunnel() {
    echo -e "${BLUE}🔗 Starting SSH tunnel to vast.ai...${NC}"
    
    # Kill existing tunnel if any
    pkill -f "ssh.*${VAST_SSH_HOST}.*${LOCAL_PORT}:localhost:${VAST_PORT}" 2>/dev/null
    
    # Start new tunnel in background
    nohup ssh -N -L ${LOCAL_PORT}:localhost:${VAST_PORT} \
        -o ServerAliveInterval=30 \
        -o ServerAliveCountMax=3 \
        -p ${VAST_SSH_PORT} ${VAST_USER}@${VAST_SSH_HOST} \
        > /tmp/claude-vast-tunnel.log 2>&1 &
    
    TUNNEL_PID=$!
    echo "Tunnel PID: $TUNNEL_PID"
    
    # Wait for tunnel to establish
    echo -e "${BLUE}⏳ Waiting for tunnel to establish...${NC}"
    for i in {1..10}; do
        sleep 2
        if check_tunnel; then
            echo -e "${GREEN}✅ Tunnel established successfully${NC}"
            return 0
        fi
    done
    
    echo -e "${RED}❌ Failed to establish tunnel${NC}"
    return 1
}

# Check if server is running on vast.ai
check_remote_server() {
    echo -e "${BLUE}🔍 Checking if server is running on vast.ai...${NC}"
    
    # Check if we can SSH into the instance
    if ! ssh -o ConnectTimeout=10 \
         -p ${VAST_SSH_PORT} ${VAST_USER}@${VAST_SSH_HOST} "echo 'SSH OK'" >/dev/null 2>&1; then
        echo -e "${RED}❌ Cannot SSH to vast.ai instance${NC}"
        echo -e "${YELLOW}💡 Check if instance is running and SSH details are correct${NC}"
        return 1
    fi
    
    # Check if proxy server is running on the remote instance
    if ! [[ "$VAST_PORT" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}❌ Invalid VAST_PORT: must be numeric${NC}"
        return 1
    fi
    REMOTE_STATUS=$(ssh -o ConnectTimeout=10 \
                   -p ${VAST_SSH_PORT} ${VAST_USER}@${VAST_SSH_HOST} \
                   "curl -s http://localhost:${VAST_PORT}/health 2>/dev/null" 2>/dev/null)
    
    if echo "$REMOTE_STATUS" | grep -q "healthy"; then
        echo -e "${GREEN}✅ Server is running on vast.ai${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠️  Server not running on vast.ai${NC}"
        return 1
    fi
}

# Start server on vast.ai instance
start_remote_server() {
    echo -e "${BLUE}🚀 Starting server on vast.ai instance...${NC}"
    
    # Check if startup script exists
    STARTUP_CHECK=$(ssh -o ConnectTimeout=10 \
                   -p ${VAST_SSH_PORT} ${VAST_USER}@${VAST_SSH_HOST} \
                   "ls -la startup_llm.sh vast_tools_proxy.py claude_tools_base.py 2>/dev/null" 2>/dev/null)
    
    if [[ -z "$STARTUP_CHECK" ]]; then
        echo -e "${YELLOW}⚠️  Startup scripts not found on remote instance${NC}"
        echo -e "${BLUE}📤 Deploying tool-enabled proxy scripts...${NC}"
        
        # Copy essential files to remote instance (including tools-enabled proxy)
        scp \
            -P ${VAST_SSH_PORT} startup_llm.sh vast_tools_proxy.py claude_tools_base.py requirements.txt \
            ${VAST_USER}@${VAST_SSH_HOST}:~/ 2>/dev/null
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}❌ Failed to deploy scripts to vast.ai${NC}"
            return 1
        fi
    fi
    
    # Start the server
    echo -e "${BLUE}⏳ Starting proxy server (this may take 2-3 minutes)...${NC}"
    ssh -o ConnectTimeout=10 \
        -p ${VAST_SSH_PORT} ${VAST_USER}@${VAST_SSH_HOST} \
        "chmod +x startup_llm.sh && nohup ./startup_llm.sh > server.log 2>&1 &" 2>/dev/null
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ Failed to start server on vast.ai${NC}"
        return 1
    fi
    
    # Wait for server to start
    echo -e "${BLUE}⏳ Waiting for server to initialize...${NC}"
    for i in {1..60}; do
        sleep 5
        if check_remote_server; then
            echo -e "${GREEN}✅ Server started successfully${NC}"
            return 0
        fi
        if [ $((i % 6)) -eq 0 ]; then
            echo -e "${YELLOW}⏳ Still starting... (${i}/60)${NC}"
        fi
    done
    
    echo -e "${RED}❌ Server failed to start within 5 minutes${NC}"
    echo -e "${YELLOW}💡 Check server.log on vast.ai instance for details${NC}"
    return 1
}

# Check vast.ai proxy health through tunnel
check_proxy() {
    echo -e "${BLUE}🔍 Checking vast.ai proxy health...${NC}"
    HEALTH=$(curl -s http://localhost:${LOCAL_PORT}/health 2>/dev/null)
    
    if echo "$HEALTH" | grep -q "healthy"; then
        echo -e "${GREEN}✅ Vast.ai proxy healthy${NC}"
        echo "Backend: $(echo "$HEALTH" | python3 -c "import json, sys; print(json.load(sys.stdin).get('components', {}).get('ollama', 'unknown'))" 2>/dev/null || echo "unknown")"
        return 0
    else
        echo -e "${RED}❌ Vast.ai proxy unhealthy${NC}"
        echo "Response: $HEALTH"
        return 1
    fi
}

# Main function
main() {
    # Step 1: Check if server is running on vast.ai
    if ! check_remote_server; then
        echo -e "${YELLOW}🔧 Server not running, attempting to start it...${NC}"
        if ! start_remote_server; then
            echo -e "${RED}❌ Failed to start server on vast.ai${NC}"
            echo -e "${YELLOW}💡 Try manually SSH-ing to your instance and running startup_llm.sh${NC}"
            exit 1
        fi
    fi
    
    # Step 2: Set up SSH tunnel
    if ! check_tunnel; then
        echo -e "${YELLOW}🔧 Setting up SSH tunnel...${NC}"
        if ! start_tunnel; then
            echo -e "${RED}❌ Failed to establish SSH tunnel${NC}"
            echo -e "${YELLOW}💡 Make sure your vast.ai instance is running and accessible${NC}"
            exit 1
        fi
    fi
    
    # Step 3: Verify end-to-end connectivity
    if ! check_proxy; then
        echo -e "${RED}❌ End-to-end connection failed${NC}"
        echo -e "${YELLOW}💡 Server is running but tunnel may have issues${NC}"
        exit 1
    fi
    
    echo ""
    echo -e "${GREEN}🎯 Ready to use Claude with vast.ai!${NC}"
    echo -e "${BLUE}📡 Using: http://localhost:${LOCAL_PORT}${NC}"
    echo ""
    
    # Set environment and run Claude
    export ANTHROPIC_BASE_URL="http://localhost:${LOCAL_PORT}"
    export VAST_MODEL=${VAST_MODEL:-"qwen3-coder"}
    
    # Pass all arguments to claude
    if [ $# -eq 0 ]; then
        echo -e "${BLUE}🤖 Starting Claude in interactive mode...${NC}"
        echo -e "${YELLOW}⏱️  Note: First response may take 30-60 seconds${NC}"
        echo ""
        claude --model "$VAST_MODEL" --dangerously-skip-permissions
    else
        echo -e "${BLUE}🤖 Running Claude with arguments: $*${NC}"
        echo ""
        claude --model "$VAST_MODEL" --dangerously-skip-permissions "$@"
    fi
}

# Help message
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Claude CLI with Vast.ai Integration - Auto-Startup Enabled"
    echo ""
    echo "Usage:"
    echo "  ./claude-vast                    # Interactive mode (starts server if needed)"
    echo "  ./claude-vast -p \"prompt\"        # Headless mode"
    echo "  ./claude-vast --verbose -p \"...\" # Verbose headless"
    echo "  ./claude-vast --help             # Show this help"
    echo ""
    echo "What it does:"
    echo "  1. ✅ Checks if server is running on vast.ai"
    echo "  2. 🚀 Automatically starts server if needed (deploys & runs startup_llm.sh)"
    echo "  3. 🔗 Sets up SSH tunnel to vast.ai instance"
    echo "  4. 🤖 Runs Claude CLI with proper configuration"
    echo ""
    echo "Configuration:"
    echo "  SSH Host: ${VAST_SSH_HOST}:${VAST_SSH_PORT}"
    echo "  Tunnel: localhost:${LOCAL_PORT} -> vast.ai:${VAST_PORT}"
    echo "  Config: ${CONFIG_FILE}"
    echo ""
    echo "Requirements:"
    echo "  - SSH access to vast.ai instance"
    echo "  - Vast.ai instance with basic Python/curl installed"
    echo "  - Local files: startup_llm.sh, vast_tools_proxy.py, claude_tools_base.py, requirements.txt"
    exit 0
fi

# Run main function
main "$@"